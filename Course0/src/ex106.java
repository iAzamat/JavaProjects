/*
Элементы многомерного массива могут быть разной длины:

    int[][] myArr = {{1, 2, 3}, {4}, {5, 6, 7, 8}};

    System.out.println(myArr[1][0]); // 4

В примере определён двумерный массив (таблица), состоящий из трёх "строк",
при этом в первой "строке" - три "ячейки", во второй - одна, а в третьей - четыре.

Менять значения в многомерном массиве также можно через прямой доступ к элементам:

    int[][] myArr = {{1, 2, 3}, {4}, {5, 6, 7, 8}};
    System.out.println(myArr[2][2]); // 7
    myArr[2][2] = 42;
    System.out.println(myArr[2][2]); // 42

Java не ограничивает нас двумерными массивами - уровней вложенности может
быть, сколько угодно. Однако нужно помнить, что управлять многомерными
массивами очень сложно.

 */

/*
На ввод подаются несколько строк текста. Вначале подаётся число n - количество
строк, а затем сами строки. Знаки препинания удалены.

Образуйте многомерный массив слов из этих строк и выведите его на печать.

Примечание. В ходе работы вы можете столкнуться с проблемой вроде этого:

    []
    [Не, пей, вина, Гертруда]
    [Быть, или, не, быть]
    [Бедный, Йорик]

Это важный вопрос, связанный с особенностями работы методов ввода nextInt()  и
nextLine().
Попробуйте самостоятельно разобраться и решить эту проблему.

Sample Input:
4
Не пей вина Гертруда
Быть или не быть
Бедный Йорик
Неладно что-то в датском королевстве

Sample Output:
[Не, пей, вина, Гертруда]
[Быть, или, не, быть]
[Бедный, Йорик]
[Неладно, что-то, в, датском, королевстве]

 */

import java.util.Scanner;
import java.util.Arrays;

public class ex106 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = Integer.parseInt(sc.nextLine());
        String[][] strings = new String[size][];
        for (int i = 0; i < size; i++) {
            strings[i] = sc.nextLine().split(" ");
            System.out.println(Arrays.toString(strings[i]));
        }

    }
}
